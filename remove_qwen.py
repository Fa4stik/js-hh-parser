#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Qwen –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import shutil
import subprocess
import sys
from pathlib import Path


def remove_huggingface_cache():
    """–£–¥–∞–ª—è–µ—Ç –∫—ç—à Hugging Face"""
    print("ÔøΩÔøΩÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫—ç—à–∞ Hugging Face...")
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫—ç—à–∞
    cache_paths = [
        Path.home() / ".cache" / "huggingface",
        Path.home() / ".cache" / "transformers",
        Path.cwd() / ".cache",
        Path.cwd() / "transformers_cache"
    ]
    
    removed_count = 0
    total_freed = 0
    
    for cache_path in cache_paths:
        if cache_path.exists():
            try:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                total_size = sum(f.stat().st_size for f in cache_path.rglob('*') if f.is_file())
                size_mb = total_size / (1024 * 1024)
                total_freed += size_mb
                
                shutil.rmtree(cache_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω –∫—ç—à: {cache_path} ({size_mb:.1f} MB)")
                removed_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {cache_path}: {e}")
    
    if removed_count == 0:
        print("‚ÑπÔ∏è –ö—ç—à Hugging Face –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –∫—ç—à-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        print(f"ÔøΩÔøΩ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {total_freed:.1f} MB")


def remove_python_packages():
    """–£–¥–∞–ª—è–µ—Ç –ø–∞–∫–µ—Ç—ã Python, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Qwen"""
    print("\nüì¶ –£–¥–∞–ª–µ–Ω–∏–µ Python –ø–∞–∫–µ—Ç–æ–≤...")
    
    packages_to_remove = [
        "transformers",
        "torch", 
        "accelerate",
        "safetensors"
    ]
    
    for package in packages_to_remove:
        try:
            result = subprocess.run([
                sys.executable, "-m", "pip", "uninstall", package, "-y"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–∞–∫–µ—Ç: {package}")
            else:
                print(f"‚ÑπÔ∏è –ü–∞–∫–µ—Ç {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {package}: {e}")


def update_requirements():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç requirements.txt, —É–±–∏—Ä–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Qwen"""
    print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt...")
    
    requirements_file = Path("requirements.txt")
    if not requirements_file.exists():
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with open(requirements_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Qwen
    qwen_related = ["transformers", "torch", "accelerate", "safetensors"]
    filtered_lines = []
    
    for line in lines:
        line = line.strip()
        if line and not any(pkg in line for pkg in qwen_related):
            filtered_lines.append(line)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(requirements_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(filtered_lines) + '\n')
    
    print("‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω (—É–¥–∞–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Qwen)")


def disable_qwen_code():
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ qwen.py"""
    print("\nÔøΩÔøΩ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...")
    
    qwen_file = Path("src/ai/qwen.py")
    if not qwen_file.exists():
        print("‚ùå –§–∞–π–ª src/ai/qwen.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(qwen_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = qwen_file.with_suffix('.py.backup')
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
    modified_content = content.replace(
        "self._load_model()",
        "# self._load_model()  # –û—Ç–∫–ª—é—á–µ–Ω–æ"
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ extract_skills –Ω–∞ –∑–∞–≥–ª—É—à–∫—É
    extract_method_start = "def extract_skills(self, description: str) -> Dict[str, List[str]]:"
    
    if extract_method_start in modified_content:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ç–æ–¥–∞
        start_pos = modified_content.find(extract_method_start)
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ (—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞)
        end_pos = modified_content.find("def ", start_pos + 1)
        if end_pos == -1:
            end_pos = modified_content.find("# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –Ω–∞–≤—ã–∫–æ–≤", start_pos)
        
        if end_pos != -1:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            stub_method = '''    def extract_skills(self, description: str) -> Dict[str, List[str]]:
        """–ó–∞–≥–ª—É—à–∫–∞ - –º–æ–¥–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞"""
        print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å Qwen –æ—Ç–∫–ª—é—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞–≤—ã–∫–∏.")
        return {"soft": [], "hard": []}'''
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
            before_method = modified_content[:start_pos]
            after_method = modified_content[end_pos:]
            modified_content = before_method + stub_method + "\n\n" + after_method
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(qwen_file, 'w', encoding='utf-8') as f:
        f.write(modified_content)
    
    print("‚úÖ –ö–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω")


def remove_docker_cache():
    """–£–¥–∞–ª—è–µ—Ç Docker –∫—ç—à, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"""
    print("\nÔøΩÔøΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫—ç—à–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Docker volumes
        result = subprocess.run([
            "docker", "volume", "ls", "--filter", "name=model_cache"
        ], capture_output=True, text=True)
        
        if "model_cache" in result.stdout:
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ Docker volume model_cache...")
            subprocess.run(["docker", "volume", "rm", "model_cache"], check=True)
            print("‚úÖ Docker volume —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ÑπÔ∏è Docker volume model_cache –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except subprocess.CalledProcessError:
        print("‚ÑπÔ∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Docker: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    print("ÔøΩÔøΩÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Qwen –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n")
    
    # –£–¥–∞–ª—è–µ–º –∫—ç—à
    remove_huggingface_cache()
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
    remove_python_packages()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
    update_requirements()
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–¥
    disable_qwen_code()
    
    # –£–¥–∞–ª—è–µ–º Docker –∫—ç—à
    remove_docker_cache()
    
    print("\nÔøΩÔøΩ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω –∫—ç—à Hugging Face")
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã transformers, torch, accelerate")
    print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω requirements.txt")
    print("   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω Docker –∫—ç—à (–µ—Å–ª–∏ –±—ã–ª)")
    print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
    print("   - –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è src/ai/qwen.py.backup")
    print("   - API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –Ω–∞–≤—ã–∫–∏")
    print("   - –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    print("\nüöÄ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:")
    print("   - python src/ai/simple_api.py - –ø—Ä–æ—Å—Ç–æ–µ API –±–µ–∑ –º–æ–¥–µ–ª–∏")
    print("   - cp src/ai/qwen.py.backup src/ai/qwen.py - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")


if __name__ == "__main__":
    main() 