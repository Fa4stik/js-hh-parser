#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∞–∫–∞–Ω—Å–∏–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
"""

import os
import logging
import asyncio
import threading
import time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from vacancy_processor import VacancyProcessor
from meta import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π
processor = VacancyProcessor("merged_vacs.xlsx")

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_active = False
processing_thread = None

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
filling_empty_active = False
filling_empty_thread = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
GET_OFFSET = 0


def process_vacancies_background():
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    global processing_active
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞—é —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
        total_rows = processor.get_total_rows()
        logger.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_rows}")
        
        if total_rows == 0:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
            processing_active = False
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
        process_dir = processor.output_dir
        csv_files = []
        max_offset = 0
        
        if os.path.exists(process_dir):
            csv_files = [f for f in os.listdir(process_dir) if f.endswith('.csv')]
            if csv_files:
                # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π offset –∏–∑ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
                offsets = []
                for file in csv_files:
                    try:
                        offset = int(file.replace('.csv', ''))
                        offsets.append(offset)
                    except ValueError:
                        continue
                if offsets:
                    max_offset = max(offsets)
        
        start_row = max_offset
        processed_count = len(csv_files) * 100
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(csv_files)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π offset: {max_offset}")
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å —Å—Ç—Ä–æ–∫–∏: {start_row}")
        
        batch_size = 100
        current_row = start_row
        batch_count = 0
        
        while current_row < total_rows and processing_active:
            logger.info(f"--- –ë–∞—Ç—á {batch_count + 1} ---")
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ {current_row} - {min(current_row + batch_size, total_rows)}")
            
            # –ß–∏—Ç–∞–µ–º –±–∞—Ç—á –≤–∞–∫–∞–Ω—Å–∏–π
            vacancies = processor.read_vacancies_batch(batch_size, current_row)
            
            if not vacancies:
                logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —ç—Ç–æ–º –±–∞—Ç—á–µ")
                break
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞—Ç—á–∞")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
            offset = current_row + len(vacancies)
            success = processor.process_batch(vacancies, offset)
            
            if success:
                logger.info(f"–ë–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {offset}.csv")
                new_processed_count = processor.get_processed_count()
                logger.info(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {new_processed_count}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ {offset}")
                break
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ç—á—É
            current_row += len(vacancies)
            batch_count += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = (current_row / total_rows) * 100
            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({current_row}/{total_rows})")
        
        logger.info("–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        final_count = processor.get_processed_count()
        logger.info(f"–ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {final_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
    finally:
        processing_active = False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    welcome_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∞–∫–∞–Ω—Å–∏–π

üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/get_process - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
/get_by_offset - –ø–æ–ª—É—á–∏—Ç—å CSV —Ñ–∞–π–ª –ø–æ offset
/merge_vacs - –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω
/merge_by_id - –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º (—Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
/fill_empty - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ –≤ merged_results.csv
/stop_fill_empty - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
/statistic - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ merged_with_original.xlsx
/start_processing - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä—É—á–Ω—É—é
/stop_processing - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/get_process - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
–°—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ process_vacs √ó 100

/get_by_offset - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSV —Ñ–∞–π–ª –ø–æ offset
–í–≤–µ–¥–∏—Ç–µ offset (4 = 100.csv, 150 = 200.csv –∏ —Ç.–¥.)

/merge_vacs - –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω merged_results.csv
–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ –≤—Å–µ–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

/merge_by_id - –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–Ω–µ –≤–µ—Å—å —Ñ–∞–π–ª)

/fill_empty - –ó–∞–ø–æ–ª–Ω—è–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—É—Å—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ (hard –∏–ª–∏ soft)
–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ merged_with_original.xlsx

/stop_fill_empty - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤

/statistic - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–π–ª—É merged_with_original.xlsx
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏

/start_processing - –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–π –≤—Ä—É—á–Ω—É—é
–ü–æ–ª–µ–∑–Ω–æ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞

/stop_processing - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

/help - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
"""
    await update.message.reply_text(help_text)


async def get_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π."""
    try:
        processed_count = processor.get_processed_count()
        total_rows = processor.get_total_rows()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        process_dir = processor.output_dir
        csv_files = []
        if os.path.exists(process_dir):
            csv_files = sorted([f for f in os.listdir(process_dir) if f.endswith('.csv')])
        
        status_icon = "üîÑ" if processing_active else "‚è∏Ô∏è"
        status_text = "–∞–∫—Ç–∏–≤–Ω–∞" if processing_active else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        fill_status_icon = "üîÑ" if filling_empty_active else "‚è∏Ô∏è"
        fill_status_text = "–∞–∫—Ç–∏–≤–Ω–æ" if filling_empty_active else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        empty_skills_count = processor.count_empty_skills_in_merged()
        
        message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π:

{status_icon} –û–±—Ä–∞–±–æ—Ç–∫–∞: {status_text}
{fill_status_icon} –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö: {fill_status_text}
‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {processed_count}
üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}
üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_rows}
üîç –ü—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {empty_skills_count}

"""
        
        if total_rows > 0:
            progress = (processed_count / total_rows) * 100
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
        
        if csv_files:
            message += f"\nüìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
            for file in csv_files[-5:]:
                message += f"‚Ä¢ {file}\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in get_process: {e}")


async def start_processing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–π –≤—Ä—É—á–Ω—É—é."""
    global processing_active, processing_thread
    
    try:
        if processing_active:
            await update.message.reply_text("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
            return
        
        await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–π...")
        
        processing_active = True
        processing_thread = threading.Thread(target=process_vacancies_background)
        processing_thread.daemon = True
        processing_thread.start()
        
        await update.message.reply_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in start_processing: {e}")


async def stop_processing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–π."""
    global processing_active
    
    try:
        if not processing_active:
            await update.message.reply_text("‚è∏Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return
        
        processing_active = False
        await update.message.reply_text("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in stop_processing: {e}")


async def get_by_offset_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ offset"""
    await update.message.reply_text(
        "üìÅ –í–≤–µ–¥–∏—Ç–µ offset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 4 ‚Üí –≤–µ—Ä–Ω–µ—Ç 100.csv\n"
        "‚Ä¢ 150 ‚Üí –≤–µ—Ä–Ω–µ—Ç 200.csv\n"
        "‚Ä¢ 250 ‚Üí –≤–µ—Ä–Ω–µ—Ç 300.csv\n\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    return GET_OFFSET


async def get_by_offset_handle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π offset"""
    try:
        user_input = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
        if user_input.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
            await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º offset
        try:
            offset = int(user_input)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel")
            return GET_OFFSET
        
        if offset <= 0:
            await update.message.reply_text("‚ùå Offset –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return GET_OFFSET
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ offset
        # offset 4 ‚Üí 100.csv, offset 150 ‚Üí 200.csv
        file_offset = ((offset - 1) // 100 + 1) * 100
        filename = f"{file_offset}.csv"
        filepath = os.path.join(processor.output_dir, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(filepath):
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                f"Offset {offset} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª—É {filename}, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
            )
            return ConversationHandler.END
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_text(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª {filename}...")
        
        with open(filepath, 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename=filename,
                caption=f"CSV —Ñ–∞–π–ª –¥–ª—è offset {offset} (—Ñ–∞–π–ª {filename})"
            )
        
        return ConversationHandler.END
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in get_by_offset_handle: {e}")
        return ConversationHandler.END


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END


async def merge_vacs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª."""
    try:
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤...")
        
        result = processor.merge_all_csv_files()
        
        # –ü—É—Ç—å –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        merged_file_path = os.path.join(processor.output_dir, "merged_results.csv")
        
        if os.path.exists(merged_file_path):
            await update.message.reply_text(f"‚úÖ {result}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(merged_file_path, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    filename="merged_results.csv",
                    caption="–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏"
                )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è {result}")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in merge_vacs: {e}")


async def merge_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º (—Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)."""
    try:
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º...")
        await update.message.reply_text("üìä –≠—Ç–∞–ø 1: –û–±—ä–µ–¥–∏–Ω—è—é –≤—Å–µ CSV —Ñ–∞–π–ª—ã...")
        
        # –°–Ω–∞—á–∞–ª–∞ –º–µ—Ä–∂–∏–º –≤—Å–µ CSV
        merge_result = processor.merge_all_csv_files()
        
        await update.message.reply_text("üìã –≠—Ç–∞–ø 2: –û–±—ä–µ–¥–∏–Ω—è—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º...")
        
        # –ó–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
        result = processor.merge_with_original()
        
        # –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É
        result_file_path = os.path.join(processor.output_dir, "merged_with_original.xlsx")
        
        if os.path.exists(result_file_path):
            await update.message.reply_text(f"‚úÖ {result}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(result_file_path, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    filename="merged_with_original.xlsx",
                    caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –Ω–∞–≤—ã–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)"
                )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è {result}")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in merge_by_id: {e}")


def fill_empty_skills_background():
    """–§–æ–Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
    global filling_empty_active
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤...")
        
        total_processed = 0
        batch_size = 10  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ —Ä–∞–∑
        
        while filling_empty_active:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
            empty_vacancies = processor.get_empty_skills_from_merged(limit=batch_size)
            
            if not empty_vacancies:
                logger.info("–ë–æ–ª—å—à–µ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏")
                break
            
            current_batch_size = len(empty_vacancies)
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—Ä—Ç–∏—é –∏–∑ {current_batch_size} –≤–∞–∫–∞–Ω—Å–∏–π...")
            
            batch_processed = 0
            
            for vacancy_id, description, csv_index, current_hard, current_soft in empty_vacancies:
                if not filling_empty_active:
                    logger.info("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                    
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                need_hard = not current_hard
                need_soft = not current_soft
                
                logger.info(f"–ó–∞–ø–æ–ª–Ω—è—é –Ω–∞–≤—ã–∫–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ID={vacancy_id} (–ø–∞—Ä—Ç–∏—è: {batch_processed + 1}/{current_batch_size}) - –Ω—É–∂–Ω–æ: hard={need_hard}, soft={need_soft}")
                logger.info(f"–¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏: hard='{current_hard}', soft='{current_soft}'")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                skill_type = None
                if need_hard and need_soft:
                    skill_type = None  # –ò—â–µ–º –æ–±–∞ —Ç–∏–ø–∞
                elif need_hard:
                    skill_type = "hard"  # –¢–æ–ª—å–∫–æ —Ö–∞—Ä–¥ —Å–∫–∏–ª–ª—ã
                elif need_soft:
                    skill_type = "soft"  # –¢–æ–ª—å–∫–æ —Å–æ—Ñ—Ç —Å–∫–∏–ª–ª—ã
                
                logger.info(f"–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {skill_type if skill_type else 'both'}")
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                max_attempts = 5
                attempt = 0
                skills = None
                
                while attempt < max_attempts and filling_empty_active:
                    attempt += 1
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}")
                    
                    skills = processor.send_api_request(description, skill_type)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –Ω—É–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
                    got_needed_skills = False
                    if skills:
                        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã hard –∏ –ø–æ–ª—É—á–∏–ª–∏ hard, –∏–ª–∏ –Ω—É–∂–Ω—ã soft –∏ –ø–æ–ª—É—á–∏–ª–∏ soft
                        if need_hard and need_soft:
                            # –ù—É–∂–Ω—ã –æ–±–∞ —Ç–∏–ø–∞ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
                            if skills.get("hard") or skills.get("soft"):
                                got_needed_skills = True
                        elif need_hard and skills.get("hard"):
                            got_needed_skills = True
                        elif need_soft and skills.get("soft"):
                            got_needed_skills = True
                        elif not need_hard and not need_soft:
                            # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –Ω–∞–≤—ã–∫–∏ (—Å—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è), —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                            got_needed_skills = True
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if attempt >= max_attempts:
                        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        got_needed_skills = True
                    
                    if got_needed_skills:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–≤—ã–∫–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: hard={len(skills.get('hard', []) if skills else [])}, soft={len(skills.get('soft', []) if skills else [])}")
                        break
                    else:
                        logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
                        time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã (merged_results.csv –∏ merged_with_original.xlsx)
                # –û–±–Ω–æ–≤–ª—è–µ–º merged_results.csv (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
                if skills and (skills.get("hard") or skills.get("soft")):
                    # –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–≤—ã–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º–∏
                    final_hard = skills.get("hard", []) if need_hard else current_hard.split(",") if current_hard else []
                    final_soft = skills.get("soft", []) if need_soft else current_soft.split(",") if current_soft else []
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º CSV
                    success1 = processor.update_skills_in_merged(csv_index, final_hard, final_soft)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
                    success2 = processor.update_skills_in_merged_with_original(
                        vacancy_id, current_hard, current_soft,
                        skills.get("hard", []) if need_hard else [],
                        skills.get("soft", []) if need_soft else []
                    )
                    
                    if success1 and success2:
                        batch_processed += 1
                        total_processed += 1
                        remaining_in_file = processor.count_empty_skills_in_merged()
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è {vacancy_id} —Å –Ω–æ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}, –æ—Å—Ç–∞–ª–æ—Å—å –≤ —Ñ–∞–π–ª–µ: {remaining_in_file}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: CSV={success1}, Excel={success2}")
                else:
                    # –ù–∞–≤—ã–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                    final_hard = current_hard.split(",") if current_hard else []
                    final_soft = current_soft.split(",") if current_soft else []
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ CSV –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    success1 = processor.update_skills_in_merged(csv_index, final_hard, final_soft)
                    
                    batch_processed += 1
                    total_processed += 1
                    remaining_in_file = processor.count_empty_skills_in_merged()
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è {vacancy_id} - –Ω–∞–≤—ã–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}, –æ—Å—Ç–∞–ª–æ—Å—å –≤ —Ñ–∞–π–ª–µ: {remaining_in_file}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.2)
            
            logger.info(f"–ü–∞—Ä—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –ø–∞—Ä—Ç–∏–∏: {batch_processed}/{current_batch_size}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏
            if filling_empty_active:
                time.sleep(1)
        
        logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {e}")
    finally:
        filling_empty_active = False


async def fill_empty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
    global filling_empty_active, filling_empty_thread
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        if filling_empty_active:
            await update.message.reply_text("üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ merged_results.csv
        merged_file = os.path.join(processor.output_dir, "merged_results.csv")
        if not os.path.exists(merged_file):
            await update.message.reply_text("‚ùå –§–∞–π–ª merged_results.csv –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /merge_vacs")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        empty_count = processor.count_empty_skills_in_merged()
        
        if empty_count == 0:
            await update.message.reply_text("‚úÖ –í—Å–µ –Ω–∞–≤—ã–∫–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            return
        
        await update.message.reply_text(
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤...\n"
            f"–ù–∞–π–¥–µ–Ω–æ {empty_count} –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        filling_empty_active = True
        filling_empty_thread = threading.Thread(target=fill_empty_skills_background)
        filling_empty_thread.daemon = True
        filling_empty_thread.start()
        
        await update.message.reply_text("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await send_fill_progress_updates(update, context)
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in fill_empty: {e}")


async def send_fill_progress_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    import asyncio
    
    initial_count = processor.count_empty_skills_in_merged()
    
    while filling_empty_active:
        await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        if not filling_empty_active:
            break
            
        current_empty = processor.count_empty_skills_in_merged()
        filled = initial_count - current_empty
        
        if filled > 0:
            progress_message = (
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {filled}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {current_empty}\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {(filled/initial_count)*100:.1f}%"
            )
            
            try:
                await update.message.reply_text(progress_message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not filling_empty_active:
        final_empty = processor.count_empty_skills_in_merged()
        final_filled = initial_count - final_empty
        
        final_message = (
            f"üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {final_filled}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—É—Å—Ç—ã—Ö: {final_empty}"
        )
        
        try:
            await update.message.reply_text(final_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def stop_fill_empty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤."""
    global filling_empty_active
    
    try:
        if not filling_empty_active:
            await update.message.reply_text("‚è∏Ô∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return
        
        filling_empty_active = False
        await update.message.reply_text("‚èπÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in stop_fill_empty: {e}")


async def statistic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–π–ª—É merged_with_original.xlsx"""
    try:
        await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª merged_with_original.xlsx...")
        
        stats = processor.get_statistics_from_merged_with_original()
        
        if stats.get("error"):
            error_message = f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}"
            await update.message.reply_text(error_message)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        total = stats["total"]
        missing_hard_only = stats["missing_hard_only"]
        missing_soft_only = stats["missing_soft_only"]
        missing_both = stats["missing_both"]
        has_both = stats["has_both"]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        if total > 0:
            missing_hard_pct = (missing_hard_only / total) * 100
            missing_soft_pct = (missing_soft_only / total) * 100
            missing_both_pct = (missing_both / total) * 100
            has_both_pct = (has_both / total) * 100
        else:
            missing_hard_pct = missing_soft_pct = missing_both_pct = has_both_pct = 0
        
        message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ merged_with_original.xlsx**

üìÑ **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:** {total:,}

üî¥ **–í–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤:** {missing_both:,} ({missing_both_pct:.1f}%)

üü° **–í–∞–∫–∞–Ω—Å–∏–∏ —Å –æ–¥–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º:**
‚Ä¢ –ù–µ—Ç hard skills: {missing_hard_only:,} ({missing_hard_pct:.1f}%)
‚Ä¢ –ù–µ—Ç soft skills: {missing_soft_only:,} ({missing_soft_pct:.1f}%)

üü¢ **–í–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏:** {has_both:,} ({has_both_pct:.1f}%)

üìà **–°–≤–æ–¥–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤:**
‚Ä¢ –í—Å–µ–≥–æ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏: {missing_hard_only + missing_soft_only + missing_both:,} ({((missing_hard_only + missing_soft_only + missing_both) / total * 100 if total > 0 else 0):.1f}%)
‚Ä¢ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –ø—Ä–æ–ø—É—â–µ–Ω: {missing_hard_only + missing_soft_only:,}
‚Ä¢ –û–±–∞ —Ç–∏–ø–∞ –ø—Ä–æ–ø—É—â–µ–Ω—ã: {missing_both:,}
"""
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(f"Error in statistic: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"Update {update} caused error {context.error}")


def start_background_processing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    global processing_active, processing_thread
    
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π...")
    processing_active = True
    processing_thread = threading.Thread(target=process_vacancies_background)
    processing_thread.daemon = True
    processing_thread.start()


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ get_by_offset
    get_offset_handler = ConversationHandler(
        entry_points=[CommandHandler("get_by_offset", get_by_offset_start)],
        states={
            GET_OFFSET: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_by_offset_handle)]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("get_process", get_process))
    application.add_handler(get_offset_handler)
    application.add_handler(CommandHandler("start_processing", start_processing))
    application.add_handler(CommandHandler("stop_processing", stop_processing))
    application.add_handler(CommandHandler("merge_vacs", merge_vacs))
    application.add_handler(CommandHandler("merge_by_id", merge_by_id))
    application.add_handler(CommandHandler("fill_empty", fill_empty))
    application.add_handler(CommandHandler("stop_fill_empty", stop_fill_empty))
    application.add_handler(CommandHandler("statistic", statistic))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    start_background_processing()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–ø—É—â–µ–Ω–∞!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
