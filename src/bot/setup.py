#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –±–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π.
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""

import os
import sys
import subprocess
import requests
from pathlib import Path

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
REQUIRED_PACKAGES = [
    'pandas',
    'requests', 
    'beautifulsoup4',
    'python-telegram-bot',
    'openpyxl',
    'xlrd',
    'telegram'
]

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python."""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version.split()[0]}")
    return True

def check_virtual_env():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    venv_indicators = ['VIRTUAL_ENV', 'CONDA_DEFAULT_ENV']
    
    for indicator in venv_indicators:
        if os.environ.get(indicator):
            print(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {os.environ.get(indicator)}")
            return True
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ sys.prefix
    if sys.prefix != sys.base_prefix:
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        return True
    
    print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
    print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source env/bin/activate")
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è? (y/N): ")
    return response.lower() in ['y', 'yes']

def install_package(package):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ pip."""
    try:
        print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
        result = subprocess.run(
            [sys.executable, '-m', 'pip', 'install', package],
            capture_output=True,
            text=True,
            check=True
        )
        print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
        print(f"Stderr: {e.stderr}")
        return False

def check_package_installed(package):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç."""
    try:
        __import__(package.replace('-', '_'))
        return True
    except ImportError:
        return False

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    print("\nüìö –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    failed_packages = []
    
    for package in REQUIRED_PACKAGES:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–∞–∫–µ—Ç
        package_import_name = package.replace('-', '_')
        if package == 'python-telegram-bot':
            package_import_name = 'telegram'
        elif package == 'beautifulsoup4':
            package_import_name = 'bs4'
        
        if check_package_installed(package_import_name):
            print(f"‚úÖ {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            continue
        
        if not install_package(package):
            failed_packages.append(package)
    
    if failed_packages:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {', '.join(failed_packages)}")
        return False
    
    print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    return True

def check_telegram_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API."""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram API...")
    
    try:
        from meta import BOT_TOKEN, TELEGRAM_API_ID, TELEGRAM_API_HASH
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
        if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ meta.py")
            return False
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if not BOT_TOKEN.count(':') == 1:
            print("‚ùå BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return False
        
        print("‚úÖ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API_ID –∏ API_HASH
        if not TELEGRAM_API_ID or TELEGRAM_API_ID == "YOUR_API_ID":
            print("‚ö†Ô∏è  TELEGRAM_API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)")
        else:
            print("‚úÖ TELEGRAM_API_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not TELEGRAM_API_HASH or TELEGRAM_API_HASH == "YOUR_API_HASH":
            print("‚ö†Ô∏è  TELEGRAM_API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)")
        else:
            print("‚úÖ TELEGRAM_API_HASH –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
        print("üåê –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API...")
        test_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
        
        response = requests.get(test_url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            if bot_info.get('ok'):
                bot_username = bot_info['result'].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"‚úÖ Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω. –ë–æ—Ç: @{bot_username}")
                return True
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π BOT_TOKEN")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {response.status_code}")
            return False
            
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ meta.py")
        return False
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram API: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'meta.py',
        'merged_vacs.xlsx'
    ]
    
    missing_files = []
    
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
        else:
            print(f"‚úÖ {file} –Ω–∞–π–¥–µ–Ω")
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    process_dir = "process_vacs"
    if not os.path.exists(process_dir):
        os.makedirs(process_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {process_dir}")
    else:
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {process_dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if not check_python_version():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_virtual_env():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_files():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_dependencies():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API
    telegram_ok = check_telegram_api()
    
    print("\n" + "=" * 50)
    
    if telegram_ok:
        print("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: python process_vacancies.py")
        print("‚Ä¢ Telegram –±–æ—Ç: python main.py")
    else:
        print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram API –≤ —Ñ–∞–π–ª–µ meta.py")
    
    print("\nüìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("‚Ä¢ –§–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É process_vacs/")
    print("‚Ä¢ –õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å")
    print("‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")

if __name__ == "__main__":
    main()
