import requests
import json


def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤"""
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
    test_vacancies = [
        "–ò—â–µ–º Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å FastAPI, Django. –¢—Ä–µ–±—É–µ—Ç—Å—è —É–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –∑–Ω–∞–Ω–∏–µ SQL.",
        "–ù—É–∂–µ–Ω frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ –∑–Ω–∞–Ω–∏–µ–º React, JavaScript, HTML/CSS. –í–∞–∂–Ω—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å.",
        "–¢—Ä–µ–±—É–µ—Ç—Å—è DevOps –∏–Ω–∂–µ–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å Docker, Kubernetes, Linux. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –Ω–∞–≤—ã–∫–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏ —Å–∞–º–æ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."
    ]
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get(f"{base_url}/")
        print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ: {response.json()['message']}")
    except requests.exceptions.ConnectionError:
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    try:
        health_response = requests.get(f"{base_url}/health")
        health_data = health_response.json()
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {health_data['status']}")
        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ñ—Ç-–Ω–∞–≤—ã–∫–æ–≤: {health_data['soft_skills_count']}")
        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ö–∞—Ä–¥-–Ω–∞–≤—ã–∫–æ–≤: {health_data['hard_skills_count']}\n")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ health: {e}\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
    for i, vacancy_text in enumerate(test_vacancies, 1):
        print(f"üîç –¢–µ—Å—Ç {i}: –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {vacancy_text[:100]}...")
        
        try:
            response = requests.post(
                f"{base_url}/api/vacancy",
                json={"body": vacancy_text},
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –°–æ—Ñ—Ç-–Ω–∞–≤—ã–∫–∏ ({len(result['soft'])}): {', '.join(result['soft'][:5])}{'...' if len(result['soft']) > 5 else ''}")
                print(f"‚úÖ –•–∞—Ä–¥-–Ω–∞–≤—ã–∫–∏ ({len(result['hard'])}): {', '.join(result['hard'][:5])}{'...' if len(result['hard']) > 5 else ''}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        
        print("-" * 80)
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    print("üß™ –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º")
    try:
        response = requests.post(
            f"{base_url}/api/vacancy",
            json={"body": ""},
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 400:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    test_api() 