#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Qwen3-8B
"""

import subprocess
import sys
import importlib.util


def check_package_version(package_name, min_version):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞"""
    try:
        if package_name == "transformers":
            import transformers
            current_version = transformers.__version__
        elif package_name == "torch":
            import torch
            current_version = torch.__version__
        elif package_name == "accelerate":
            import accelerate
            current_version = accelerate.__version__
        else:
            return False, "Unknown package"
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        current_major = int(current_version.split('.')[0])
        current_minor = int(current_version.split('.')[1])
        min_major = int(min_version.split('.')[0])
        min_minor = int(min_version.split('.')[1])
        
        if current_major > min_major or (current_major == min_major and current_minor >= min_minor):
            return True, current_version
        else:
            return False, current_version
            
    except ImportError:
        return False, "Not installed"
    except Exception as e:
        return False, str(e)


def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Qwen3-8B...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏
    packages = {
        "transformers": "4.51.0",
        "torch": "2.1.0", 
        "accelerate": "0.24.1"
    }
    
    needs_update = []
    
    for package, min_version in packages.items():
        is_ok, version = check_package_version(package, min_version)
        if is_ok:
            print(f"‚úÖ {package} {version} - OK")
        else:
            print(f"‚ùå {package} {version} - —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {min_version})")
            needs_update.append(package)
    
    if not needs_update:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
        return True
    
    print(f"\nüì¶ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã: {', '.join(needs_update)}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt", "--upgrade"
        ], check=True)
        
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:")
        for package, min_version in packages.items():
            is_ok, version = check_package_version(package, min_version)
            status = "‚úÖ" if is_ok else "‚ùå"
            print(f"{status} {package} {version}")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False


def test_qwen3_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Qwen3"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Qwen3...")
    
    try:
        from transformers import AutoTokenizer, AutoModelForCausalLM
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä–∞...")
        tokenizer = AutoTokenizer.from_pretrained("Qwen/Qwen3-8B")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apply_chat_template
        if hasattr(tokenizer, 'apply_chat_template'):
            print("‚úÖ apply_chat_template –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå apply_chat_template –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º apply_chat_template
        messages = [{"role": "user", "content": "Test"}]
        try:
            text = tokenizer.apply_chat_template(
                messages, 
                tokenize=False, 
                add_generation_prompt=True,
                enable_thinking=False
            )
            print("‚úÖ apply_chat_template —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ apply_chat_template: {e}")
            return False
        
        print("‚úÖ Qwen3 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Qwen3-8B\n")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_requirements():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    if not test_qwen3_compatibility():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é Qwen3")
        return False
    
    print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å Qwen3-8B!")
    print("üìã –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å API:")
    print("   python start_api.py")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 